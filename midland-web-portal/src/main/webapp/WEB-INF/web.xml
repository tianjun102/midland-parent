<?xml version="1.0" encoding="utf-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">


	<!-- 配置Spring上下文监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext.xml</param-value>
	</context-param>

	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>test.webapp</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
	</listener>
	<!-- Spring -->
	//====================================================================
	<filter>
		<filter-name>springSessionRepositoryFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSessionRepositoryFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<session-config>
        <session-timeout>30</session-timeout>
    </session-config>

	//====================================================================
	<filter>
		<filter-name>cors</filter-name>
		<filter-class>com.midland.web.filter.ReponseFilter</filter-class><!--你过滤器的包 -->
	</filter>
	<filter-mapping>
		<filter-name>cors</filter-name>
		<url-pattern>/*</url-pattern><!-- 你开放的接口前缀  -->
	</filter-mapping>
	//====================================================================
	<filter>
		<filter-name>sessionFilter</filter-name>
		<filter-class>com.midland.web.filter.GetContextFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>sessionFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	//====================================================================
	<!-- 配置Spring字符编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	//====================================================================
	<!-- Spring MVC 核心控制器 DispatcherServlet 配置 -->
	<servlet>
		<servlet-name>DispatcherServlet</servlet-name><!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--指明了配置文件的文件名，不使用默认配置文件名，而使用dispatcher-servlet.xml配置文件。-->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!--其中<param-value>**.xml</param-value> 这里可以使用多种写法-->
			<!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml-->
			<!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value>-->
			<!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value>-->
			<!--4、多个值用逗号分隔-->
			<param-value>classpath:spring/applicationContext.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup><!--是启动顺序，让这个Servlet随Servletp容器一起启动。-->
	</servlet>
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<!-- 拦截所有/rest/* 的请求,交给DispatcherServlet处理,性能最好 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>



</web-app>
